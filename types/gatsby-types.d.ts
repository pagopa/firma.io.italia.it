/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type LayoutYaml or null if there are no children of given type on this node */
  readonly childLayoutYaml: Maybe<LayoutYaml>;
  /** Returns the first child node of type PageYaml or null if there are no children of given type on this node */
  readonly childPageYaml: Maybe<PageYaml>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type LayoutYaml */
  readonly childrenLayoutYaml: Maybe<ReadonlyArray<Maybe<LayoutYaml>>>;
  /** Returns all children nodes filtered by type PageYaml */
  readonly childrenPageYaml: Maybe<ReadonlyArray<Maybe<PageYaml>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childLayoutYaml: InputMaybe<LayoutYamlFieldSelector>;
  readonly childPageYaml: InputMaybe<PageYamlFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenLayoutYaml: InputMaybe<LayoutYamlFieldSelector>;
  readonly childrenPageYaml: InputMaybe<PageYamlFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childLayoutYaml: InputMaybe<LayoutYamlFilterInput>;
  readonly childPageYaml: InputMaybe<PageYamlFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenLayoutYaml: InputMaybe<LayoutYamlFilterListInput>;
  readonly childrenPageYaml: InputMaybe<PageYamlFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childLayoutYaml: InputMaybe<LayoutYamlSortInput>;
  readonly childPageYaml: InputMaybe<PageYamlSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenLayoutYaml: InputMaybe<LayoutYamlSortInput>;
  readonly childrenPageYaml: InputMaybe<PageYamlSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type LayoutYaml = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly footer: Maybe<LayoutYamlFooter>;
  readonly header: Maybe<LayoutYamlHeader>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly preHeader: Maybe<LayoutYamlPreHeader>;
};

type LayoutYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutYamlEdge>;
  readonly group: ReadonlyArray<LayoutYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutYamlConnection_distinctArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlConnection_groupArgs = {
  field: LayoutYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutYamlConnection_maxArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlConnection_minArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlConnection_sumArgs = {
  field: LayoutYamlFieldSelector;
};

type LayoutYamlEdge = {
  readonly next: Maybe<LayoutYaml>;
  readonly node: LayoutYaml;
  readonly previous: Maybe<LayoutYaml>;
};

type LayoutYamlFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly footer: InputMaybe<LayoutYamlFooterFieldSelector>;
  readonly header: InputMaybe<LayoutYamlHeaderFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly preHeader: InputMaybe<LayoutYamlPreHeaderFieldSelector>;
};

type LayoutYamlFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly footer: InputMaybe<LayoutYamlFooterFilterInput>;
  readonly header: InputMaybe<LayoutYamlHeaderFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly preHeader: InputMaybe<LayoutYamlPreHeaderFilterInput>;
};

type LayoutYamlFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlFilterInput>;
};

type LayoutYamlFooter = {
  readonly companyLink: Maybe<LayoutYamlFooterCompanyLink>;
  readonly currentLangCode: Maybe<Scalars['String']>;
  readonly languages: Maybe<LayoutYamlFooterLanguages>;
  readonly legalInfo: Maybe<Scalars['String']>;
  readonly links: Maybe<LayoutYamlFooterLinks>;
  readonly productsJsonUrl: Maybe<Scalars['String']>;
};

type LayoutYamlFooterCompanyLink = {
  readonly ariaLabel: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
};

type LayoutYamlFooterCompanyLinkFieldSelector = {
  readonly ariaLabel: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterCompanyLinkFilterInput = {
  readonly ariaLabel: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterCompanyLinkSortInput = {
  readonly ariaLabel: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterFieldSelector = {
  readonly companyLink: InputMaybe<LayoutYamlFooterCompanyLinkFieldSelector>;
  readonly currentLangCode: InputMaybe<FieldSelectorEnum>;
  readonly languages: InputMaybe<LayoutYamlFooterLanguagesFieldSelector>;
  readonly legalInfo: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<LayoutYamlFooterLinksFieldSelector>;
  readonly productsJsonUrl: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterFilterInput = {
  readonly companyLink: InputMaybe<LayoutYamlFooterCompanyLinkFilterInput>;
  readonly currentLangCode: InputMaybe<StringQueryOperatorInput>;
  readonly languages: InputMaybe<LayoutYamlFooterLanguagesFilterInput>;
  readonly legalInfo: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<LayoutYamlFooterLinksFilterInput>;
  readonly productsJsonUrl: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLanguages = {
  readonly it: Maybe<LayoutYamlFooterLanguagesIt>;
};

type LayoutYamlFooterLanguagesFieldSelector = {
  readonly it: InputMaybe<LayoutYamlFooterLanguagesItFieldSelector>;
};

type LayoutYamlFooterLanguagesFilterInput = {
  readonly it: InputMaybe<LayoutYamlFooterLanguagesItFilterInput>;
};

type LayoutYamlFooterLanguagesIt = {
  readonly it: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLanguagesItFieldSelector = {
  readonly it: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLanguagesItFilterInput = {
  readonly it: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLanguagesItSortInput = {
  readonly it: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLanguagesSortInput = {
  readonly it: InputMaybe<LayoutYamlFooterLanguagesItSortInput>;
};

type LayoutYamlFooterLinks = {
  readonly aboutUs: Maybe<LayoutYamlFooterLinksAboutUs>;
  readonly followUs: Maybe<LayoutYamlFooterLinksFollowUs>;
  readonly resources: Maybe<LayoutYamlFooterLinksResources>;
};

type LayoutYamlFooterLinksAboutUs = {
  readonly links: Maybe<ReadonlyArray<Maybe<LayoutYamlFooterLinksAboutUsLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksAboutUsFieldSelector = {
  readonly links: InputMaybe<LayoutYamlFooterLinksAboutUsLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksAboutUsFilterInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksAboutUsLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksAboutUsLinks = {
  readonly ariaLabel: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksAboutUsLinksFieldSelector = {
  readonly ariaLabel: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksAboutUsLinksFilterInput = {
  readonly ariaLabel: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksAboutUsLinksFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlFooterLinksAboutUsLinksFilterInput>;
};

type LayoutYamlFooterLinksAboutUsLinksSortInput = {
  readonly ariaLabel: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksAboutUsSortInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksAboutUsLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksFieldSelector = {
  readonly aboutUs: InputMaybe<LayoutYamlFooterLinksAboutUsFieldSelector>;
  readonly followUs: InputMaybe<LayoutYamlFooterLinksFollowUsFieldSelector>;
  readonly resources: InputMaybe<LayoutYamlFooterLinksResourcesFieldSelector>;
};

type LayoutYamlFooterLinksFilterInput = {
  readonly aboutUs: InputMaybe<LayoutYamlFooterLinksAboutUsFilterInput>;
  readonly followUs: InputMaybe<LayoutYamlFooterLinksFollowUsFilterInput>;
  readonly resources: InputMaybe<LayoutYamlFooterLinksResourcesFilterInput>;
};

type LayoutYamlFooterLinksFollowUs = {
  readonly links: Maybe<ReadonlyArray<Maybe<LayoutYamlFooterLinksFollowUsLinks>>>;
  readonly socialLinks: Maybe<ReadonlyArray<Maybe<LayoutYamlFooterLinksFollowUsSocialLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksFollowUsFieldSelector = {
  readonly links: InputMaybe<LayoutYamlFooterLinksFollowUsLinksFieldSelector>;
  readonly socialLinks: InputMaybe<LayoutYamlFooterLinksFollowUsSocialLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksFollowUsFilterInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksFollowUsLinksFilterListInput>;
  readonly socialLinks: InputMaybe<LayoutYamlFooterLinksFollowUsSocialLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksFollowUsLinks = {
  readonly ariaLabel: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksFollowUsLinksFieldSelector = {
  readonly ariaLabel: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksFollowUsLinksFilterInput = {
  readonly ariaLabel: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksFollowUsLinksFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlFooterLinksFollowUsLinksFilterInput>;
};

type LayoutYamlFooterLinksFollowUsLinksSortInput = {
  readonly ariaLabel: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksFollowUsSocialLinks = {
  readonly ariaLabel: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksFollowUsSocialLinksFieldSelector = {
  readonly ariaLabel: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksFollowUsSocialLinksFilterInput = {
  readonly ariaLabel: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksFollowUsSocialLinksFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlFooterLinksFollowUsSocialLinksFilterInput>;
};

type LayoutYamlFooterLinksFollowUsSocialLinksSortInput = {
  readonly ariaLabel: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksFollowUsSortInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksFollowUsLinksSortInput>;
  readonly socialLinks: InputMaybe<LayoutYamlFooterLinksFollowUsSocialLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksResources = {
  readonly links: Maybe<ReadonlyArray<Maybe<LayoutYamlFooterLinksResourcesLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksResourcesFieldSelector = {
  readonly links: InputMaybe<LayoutYamlFooterLinksResourcesLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksResourcesFilterInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksResourcesLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksResourcesLinks = {
  readonly ariaLabel: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
};

type LayoutYamlFooterLinksResourcesLinksFieldSelector = {
  readonly ariaLabel: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlFooterLinksResourcesLinksFilterInput = {
  readonly ariaLabel: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlFooterLinksResourcesLinksFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlFooterLinksResourcesLinksFilterInput>;
};

type LayoutYamlFooterLinksResourcesLinksSortInput = {
  readonly ariaLabel: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksResourcesSortInput = {
  readonly links: InputMaybe<LayoutYamlFooterLinksResourcesLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type LayoutYamlFooterLinksSortInput = {
  readonly aboutUs: InputMaybe<LayoutYamlFooterLinksAboutUsSortInput>;
  readonly followUs: InputMaybe<LayoutYamlFooterLinksFollowUsSortInput>;
  readonly resources: InputMaybe<LayoutYamlFooterLinksResourcesSortInput>;
};

type LayoutYamlFooterSortInput = {
  readonly companyLink: InputMaybe<LayoutYamlFooterCompanyLinkSortInput>;
  readonly currentLangCode: InputMaybe<SortOrderEnum>;
  readonly languages: InputMaybe<LayoutYamlFooterLanguagesSortInput>;
  readonly legalInfo: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<LayoutYamlFooterLinksSortInput>;
  readonly productsJsonUrl: InputMaybe<SortOrderEnum>;
};

type LayoutYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LayoutYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutYamlGroupConnection_distinctArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlGroupConnection_groupArgs = {
  field: LayoutYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutYamlGroupConnection_maxArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlGroupConnection_minArgs = {
  field: LayoutYamlFieldSelector;
};


type LayoutYamlGroupConnection_sumArgs = {
  field: LayoutYamlFieldSelector;
};

type LayoutYamlHeader = {
  readonly ctaButtons: Maybe<ReadonlyArray<Maybe<LayoutYamlHeaderCtaButtons>>>;
  readonly menu: Maybe<ReadonlyArray<Maybe<LayoutYamlHeaderMenu>>>;
  readonly product: Maybe<LayoutYamlHeaderProduct>;
  readonly slug: Maybe<Scalars['String']>;
  readonly theme: Maybe<Scalars['String']>;
};

type LayoutYamlHeaderCtaButtons = {
  readonly color: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly variant: Maybe<Scalars['String']>;
};

type LayoutYamlHeaderCtaButtonsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly variant: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlHeaderCtaButtonsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlHeaderCtaButtonsFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlHeaderCtaButtonsFilterInput>;
};

type LayoutYamlHeaderCtaButtonsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly variant: InputMaybe<SortOrderEnum>;
};

type LayoutYamlHeaderFieldSelector = {
  readonly ctaButtons: InputMaybe<LayoutYamlHeaderCtaButtonsFieldSelector>;
  readonly menu: InputMaybe<LayoutYamlHeaderMenuFieldSelector>;
  readonly product: InputMaybe<LayoutYamlHeaderProductFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly theme: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlHeaderFilterInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlHeaderCtaButtonsFilterListInput>;
  readonly menu: InputMaybe<LayoutYamlHeaderMenuFilterListInput>;
  readonly product: InputMaybe<LayoutYamlHeaderProductFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly theme: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlHeaderMenu = {
  readonly href: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly theme: Maybe<Scalars['String']>;
};

type LayoutYamlHeaderMenuFieldSelector = {
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly theme: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlHeaderMenuFilterInput = {
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly theme: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlHeaderMenuFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlHeaderMenuFilterInput>;
};

type LayoutYamlHeaderMenuSortInput = {
  readonly href: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly theme: InputMaybe<SortOrderEnum>;
};

type LayoutYamlHeaderProduct = {
  readonly href: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type LayoutYamlHeaderProductFieldSelector = {
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlHeaderProductFilterInput = {
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlHeaderProductSortInput = {
  readonly href: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type LayoutYamlHeaderSortInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlHeaderCtaButtonsSortInput>;
  readonly menu: InputMaybe<LayoutYamlHeaderMenuSortInput>;
  readonly product: InputMaybe<LayoutYamlHeaderProductSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly theme: InputMaybe<SortOrderEnum>;
};

type LayoutYamlPreHeader = {
  readonly leftCtas: Maybe<LayoutYamlPreHeaderLeftCtas>;
  readonly rightCtas: Maybe<LayoutYamlPreHeaderRightCtas>;
};

type LayoutYamlPreHeaderFieldSelector = {
  readonly leftCtas: InputMaybe<LayoutYamlPreHeaderLeftCtasFieldSelector>;
  readonly rightCtas: InputMaybe<LayoutYamlPreHeaderRightCtasFieldSelector>;
};

type LayoutYamlPreHeaderFilterInput = {
  readonly leftCtas: InputMaybe<LayoutYamlPreHeaderLeftCtasFilterInput>;
  readonly rightCtas: InputMaybe<LayoutYamlPreHeaderRightCtasFilterInput>;
};

type LayoutYamlPreHeaderLeftCtas = {
  readonly ctaButtons: Maybe<ReadonlyArray<Maybe<LayoutYamlPreHeaderLeftCtasCtaButtons>>>;
  readonly theme: Maybe<Scalars['String']>;
};

type LayoutYamlPreHeaderLeftCtasCtaButtons = {
  readonly color: Maybe<Scalars['String']>;
  readonly disableRipple: Maybe<Scalars['Boolean']>;
  readonly href: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly variant: Maybe<Scalars['String']>;
};

type LayoutYamlPreHeaderLeftCtasCtaButtonsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly disableRipple: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly variant: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlPreHeaderLeftCtasCtaButtonsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly disableRipple: InputMaybe<BooleanQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlPreHeaderLeftCtasCtaButtonsFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlPreHeaderLeftCtasCtaButtonsFilterInput>;
};

type LayoutYamlPreHeaderLeftCtasCtaButtonsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly disableRipple: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly variant: InputMaybe<SortOrderEnum>;
};

type LayoutYamlPreHeaderLeftCtasFieldSelector = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderLeftCtasCtaButtonsFieldSelector>;
  readonly theme: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlPreHeaderLeftCtasFilterInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderLeftCtasCtaButtonsFilterListInput>;
  readonly theme: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlPreHeaderLeftCtasSortInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderLeftCtasCtaButtonsSortInput>;
  readonly theme: InputMaybe<SortOrderEnum>;
};

type LayoutYamlPreHeaderRightCtas = {
  readonly ctaButtons: Maybe<ReadonlyArray<Maybe<LayoutYamlPreHeaderRightCtasCtaButtons>>>;
  readonly theme: Maybe<Scalars['String']>;
};

type LayoutYamlPreHeaderRightCtasCtaButtons = {
  readonly color: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly startIcon: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly variant: Maybe<Scalars['String']>;
};

type LayoutYamlPreHeaderRightCtasCtaButtonsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly startIcon: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly variant: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlPreHeaderRightCtasCtaButtonsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly startIcon: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlPreHeaderRightCtasCtaButtonsFilterListInput = {
  readonly elemMatch: InputMaybe<LayoutYamlPreHeaderRightCtasCtaButtonsFilterInput>;
};

type LayoutYamlPreHeaderRightCtasCtaButtonsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly startIcon: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly variant: InputMaybe<SortOrderEnum>;
};

type LayoutYamlPreHeaderRightCtasFieldSelector = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderRightCtasCtaButtonsFieldSelector>;
  readonly theme: InputMaybe<FieldSelectorEnum>;
};

type LayoutYamlPreHeaderRightCtasFilterInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderRightCtasCtaButtonsFilterListInput>;
  readonly theme: InputMaybe<StringQueryOperatorInput>;
};

type LayoutYamlPreHeaderRightCtasSortInput = {
  readonly ctaButtons: InputMaybe<LayoutYamlPreHeaderRightCtasCtaButtonsSortInput>;
  readonly theme: InputMaybe<SortOrderEnum>;
};

type LayoutYamlPreHeaderSortInput = {
  readonly leftCtas: InputMaybe<LayoutYamlPreHeaderLeftCtasSortInput>;
  readonly rightCtas: InputMaybe<LayoutYamlPreHeaderRightCtasSortInput>;
};

type LayoutYamlSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly footer: InputMaybe<LayoutYamlFooterSortInput>;
  readonly header: InputMaybe<LayoutYamlHeaderSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly preHeader: InputMaybe<LayoutYamlPreHeaderSortInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type PageYaml = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly components: Maybe<ReadonlyArray<Maybe<PageYamlComponents>>>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly route: Maybe<Scalars['String']>;
  readonly seo: Maybe<PageYamlSeo>;
  readonly url: Maybe<Scalars['String']>;
};


type PageYaml_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type PageYamlComponents = {
  readonly accordionItems: Maybe<ReadonlyArray<Maybe<PageYamlComponentsAccordionItems>>>;
  readonly autoplay: Maybe<Scalars['String']>;
  readonly background: Maybe<File>;
  readonly body: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['String']>;
  readonly ctaButtons: Maybe<ReadonlyArray<Maybe<PageYamlComponentsCtaButtons>>>;
  readonly decoration: Maybe<PageYamlComponentsDecoration>;
  readonly eyelet: Maybe<Scalars['String']>;
  readonly full: Maybe<Scalars['String']>;
  readonly image: Maybe<PageYamlComponentsImage>;
  readonly items: Maybe<ReadonlyArray<Maybe<PageYamlComponentsItems>>>;
  readonly layout: Maybe<Scalars['String']>;
  readonly loop: Maybe<Scalars['String']>;
  readonly privacy: Maybe<Scalars['String']>;
  readonly reversed: Maybe<Scalars['String']>;
  readonly rowMaxSteps: Maybe<Scalars['Int']>;
  readonly size: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly steps: Maybe<ReadonlyArray<Maybe<PageYamlComponentsSteps>>>;
  readonly stepsAlign: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly theme: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly useYoutubeLayout: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['String']>;
};

type PageYamlComponentsAccordionItems = {
  readonly content: Maybe<Scalars['String']>;
  readonly header: Maybe<Scalars['String']>;
};

type PageYamlComponentsAccordionItemsFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly header: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsAccordionItemsFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly header: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsAccordionItemsFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlComponentsAccordionItemsFilterInput>;
};

type PageYamlComponentsAccordionItemsSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly header: InputMaybe<SortOrderEnum>;
};

type PageYamlComponentsCtaButtons = {
  readonly href: Maybe<Scalars['String']>;
  readonly target: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly variant: Maybe<Scalars['String']>;
};

type PageYamlComponentsCtaButtonsFieldSelector = {
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly variant: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsCtaButtonsFilterInput = {
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsCtaButtonsFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlComponentsCtaButtonsFilterInput>;
};

type PageYamlComponentsCtaButtonsSortInput = {
  readonly href: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly variant: InputMaybe<SortOrderEnum>;
};

type PageYamlComponentsDecoration = {
  readonly alt: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
};

type PageYamlComponentsDecorationFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsDecorationFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsDecorationSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
};

type PageYamlComponentsFieldSelector = {
  readonly accordionItems: InputMaybe<PageYamlComponentsAccordionItemsFieldSelector>;
  readonly autoplay: InputMaybe<FieldSelectorEnum>;
  readonly background: InputMaybe<FileFieldSelector>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly ctaButtons: InputMaybe<PageYamlComponentsCtaButtonsFieldSelector>;
  readonly decoration: InputMaybe<PageYamlComponentsDecorationFieldSelector>;
  readonly eyelet: InputMaybe<FieldSelectorEnum>;
  readonly full: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<PageYamlComponentsImageFieldSelector>;
  readonly items: InputMaybe<PageYamlComponentsItemsFieldSelector>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly loop: InputMaybe<FieldSelectorEnum>;
  readonly privacy: InputMaybe<FieldSelectorEnum>;
  readonly reversed: InputMaybe<FieldSelectorEnum>;
  readonly rowMaxSteps: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly steps: InputMaybe<PageYamlComponentsStepsFieldSelector>;
  readonly stepsAlign: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly theme: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly useYoutubeLayout: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsFilterInput = {
  readonly accordionItems: InputMaybe<PageYamlComponentsAccordionItemsFilterListInput>;
  readonly autoplay: InputMaybe<StringQueryOperatorInput>;
  readonly background: InputMaybe<FileFilterInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly ctaButtons: InputMaybe<PageYamlComponentsCtaButtonsFilterListInput>;
  readonly decoration: InputMaybe<PageYamlComponentsDecorationFilterInput>;
  readonly eyelet: InputMaybe<StringQueryOperatorInput>;
  readonly full: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<PageYamlComponentsImageFilterInput>;
  readonly items: InputMaybe<PageYamlComponentsItemsFilterListInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly loop: InputMaybe<StringQueryOperatorInput>;
  readonly privacy: InputMaybe<StringQueryOperatorInput>;
  readonly reversed: InputMaybe<StringQueryOperatorInput>;
  readonly rowMaxSteps: InputMaybe<IntQueryOperatorInput>;
  readonly size: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly steps: InputMaybe<PageYamlComponentsStepsFilterListInput>;
  readonly stepsAlign: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly theme: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly useYoutubeLayout: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlComponentsFilterInput>;
};

type PageYamlComponentsImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly src: Maybe<File>;
};

type PageYamlComponentsImageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FileFieldSelector>;
};

type PageYamlComponentsImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<FileFilterInput>;
};

type PageYamlComponentsImageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<FileSortInput>;
};

type PageYamlComponentsItems = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type PageYamlComponentsItemsFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsItemsFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsItemsFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlComponentsItemsFilterInput>;
};

type PageYamlComponentsItemsSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type PageYamlComponentsSortInput = {
  readonly accordionItems: InputMaybe<PageYamlComponentsAccordionItemsSortInput>;
  readonly autoplay: InputMaybe<SortOrderEnum>;
  readonly background: InputMaybe<FileSortInput>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly content: InputMaybe<SortOrderEnum>;
  readonly ctaButtons: InputMaybe<PageYamlComponentsCtaButtonsSortInput>;
  readonly decoration: InputMaybe<PageYamlComponentsDecorationSortInput>;
  readonly eyelet: InputMaybe<SortOrderEnum>;
  readonly full: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<PageYamlComponentsImageSortInput>;
  readonly items: InputMaybe<PageYamlComponentsItemsSortInput>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly loop: InputMaybe<SortOrderEnum>;
  readonly privacy: InputMaybe<SortOrderEnum>;
  readonly reversed: InputMaybe<SortOrderEnum>;
  readonly rowMaxSteps: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly steps: InputMaybe<PageYamlComponentsStepsSortInput>;
  readonly stepsAlign: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly theme: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly useYoutubeLayout: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type PageYamlComponentsSteps = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type PageYamlComponentsStepsFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageYamlComponentsStepsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlComponentsStepsFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlComponentsStepsFilterInput>;
};

type PageYamlComponentsStepsSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type PageYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageYamlEdge>;
  readonly group: ReadonlyArray<PageYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PageYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageYamlConnection_distinctArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlConnection_groupArgs = {
  field: PageYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageYamlConnection_maxArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlConnection_minArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlConnection_sumArgs = {
  field: PageYamlFieldSelector;
};

type PageYamlEdge = {
  readonly next: Maybe<PageYaml>;
  readonly node: PageYaml;
  readonly previous: Maybe<PageYaml>;
};

type PageYamlFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly components: InputMaybe<PageYamlComponentsFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly route: InputMaybe<FieldSelectorEnum>;
  readonly seo: InputMaybe<PageYamlSeoFieldSelector>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PageYamlFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly components: InputMaybe<PageYamlComponentsFilterListInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly route: InputMaybe<StringQueryOperatorInput>;
  readonly seo: InputMaybe<PageYamlSeoFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlFilterInput>;
};

type PageYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PageYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PageYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageYamlGroupConnection_distinctArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlGroupConnection_groupArgs = {
  field: PageYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageYamlGroupConnection_maxArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlGroupConnection_minArgs = {
  field: PageYamlFieldSelector;
};


type PageYamlGroupConnection_sumArgs = {
  field: PageYamlFieldSelector;
};

type PageYamlSeo = {
  readonly metaDescription: Maybe<Scalars['String']>;
  readonly metaImage: Maybe<PageYamlSeoMetaImage>;
  readonly metaSocial: Maybe<ReadonlyArray<Maybe<PageYamlSeoMetaSocial>>>;
  readonly metaTitle: Maybe<Scalars['String']>;
};

type PageYamlSeoFieldSelector = {
  readonly metaDescription: InputMaybe<FieldSelectorEnum>;
  readonly metaImage: InputMaybe<PageYamlSeoMetaImageFieldSelector>;
  readonly metaSocial: InputMaybe<PageYamlSeoMetaSocialFieldSelector>;
  readonly metaTitle: InputMaybe<FieldSelectorEnum>;
};

type PageYamlSeoFilterInput = {
  readonly metaDescription: InputMaybe<StringQueryOperatorInput>;
  readonly metaImage: InputMaybe<PageYamlSeoMetaImageFilterInput>;
  readonly metaSocial: InputMaybe<PageYamlSeoMetaSocialFilterListInput>;
  readonly metaTitle: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlSeoMetaImage = {
  readonly localFile: Maybe<PageYamlSeoMetaImageLocalFile>;
};

type PageYamlSeoMetaImageFieldSelector = {
  readonly localFile: InputMaybe<PageYamlSeoMetaImageLocalFileFieldSelector>;
};

type PageYamlSeoMetaImageFilterInput = {
  readonly localFile: InputMaybe<PageYamlSeoMetaImageLocalFileFilterInput>;
};

type PageYamlSeoMetaImageLocalFile = {
  readonly publicURL: Maybe<Scalars['String']>;
};

type PageYamlSeoMetaImageLocalFileFieldSelector = {
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
};

type PageYamlSeoMetaImageLocalFileFilterInput = {
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlSeoMetaImageLocalFileSortInput = {
  readonly publicURL: InputMaybe<SortOrderEnum>;
};

type PageYamlSeoMetaImageSortInput = {
  readonly localFile: InputMaybe<PageYamlSeoMetaImageLocalFileSortInput>;
};

type PageYamlSeoMetaSocial = {
  readonly description: Maybe<Scalars['String']>;
  readonly socialNetwork: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type PageYamlSeoMetaSocialFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly socialNetwork: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageYamlSeoMetaSocialFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly socialNetwork: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageYamlSeoMetaSocialFilterListInput = {
  readonly elemMatch: InputMaybe<PageYamlSeoMetaSocialFilterInput>;
};

type PageYamlSeoMetaSocialSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly socialNetwork: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type PageYamlSeoSortInput = {
  readonly metaDescription: InputMaybe<SortOrderEnum>;
  readonly metaImage: InputMaybe<PageYamlSeoMetaImageSortInput>;
  readonly metaSocial: InputMaybe<PageYamlSeoMetaSocialSortInput>;
  readonly metaTitle: InputMaybe<SortOrderEnum>;
};

type PageYamlSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly components: InputMaybe<PageYamlComponentsSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly route: InputMaybe<SortOrderEnum>;
  readonly seo: InputMaybe<PageYamlSeoSortInput>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allLayoutYaml: LayoutYamlConnection;
  readonly allPageYaml: PageYamlConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStaticImage: StaticImageConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly layoutYaml: Maybe<LayoutYaml>;
  readonly pageYaml: Maybe<PageYaml>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly staticImage: Maybe<StaticImage>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allLayoutYamlArgs = {
  filter: InputMaybe<LayoutYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LayoutYamlSortInput>>>;
};


type Query_allPageYamlArgs = {
  filter: InputMaybe<PageYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PageYamlSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStaticImageArgs = {
  filter: InputMaybe<StaticImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<StaticImageSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childLayoutYaml: InputMaybe<LayoutYamlFilterInput>;
  childPageYaml: InputMaybe<PageYamlFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenLayoutYaml: InputMaybe<LayoutYamlFilterListInput>;
  childrenPageYaml: InputMaybe<PageYamlFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_layoutYamlArgs = {
  children: InputMaybe<NodeFilterListInput>;
  footer: InputMaybe<LayoutYamlFooterFilterInput>;
  header: InputMaybe<LayoutYamlHeaderFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  preHeader: InputMaybe<LayoutYamlPreHeaderFilterInput>;
};


type Query_pageYamlArgs = {
  children: InputMaybe<NodeFilterListInput>;
  components: InputMaybe<PageYamlComponentsFilterListInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  route: InputMaybe<StringQueryOperatorInput>;
  seo: InputMaybe<PageYamlSeoFilterInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_staticImageArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly DEV_SSR: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly DEV_SSR: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly DEV_SSR: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly DEV_SSR: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly keywords: Maybe<Scalars['String']>;
  readonly metaDescription: Maybe<Scalars['String']>;
  readonly metaRobots: Maybe<Scalars['String']>;
  readonly metaSocial: Maybe<SiteSiteMetadataMetaSocial>;
  readonly metaTitle: Maybe<Scalars['String']>;
  readonly metaViewport: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly keywords: InputMaybe<FieldSelectorEnum>;
  readonly metaDescription: InputMaybe<FieldSelectorEnum>;
  readonly metaRobots: InputMaybe<FieldSelectorEnum>;
  readonly metaSocial: InputMaybe<SiteSiteMetadataMetaSocialFieldSelector>;
  readonly metaTitle: InputMaybe<FieldSelectorEnum>;
  readonly metaViewport: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly keywords: InputMaybe<StringQueryOperatorInput>;
  readonly metaDescription: InputMaybe<StringQueryOperatorInput>;
  readonly metaRobots: InputMaybe<StringQueryOperatorInput>;
  readonly metaSocial: InputMaybe<SiteSiteMetadataMetaSocialFilterInput>;
  readonly metaTitle: InputMaybe<StringQueryOperatorInput>;
  readonly metaViewport: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataMetaSocial = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly socialNetwork: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataMetaSocialFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly socialNetwork: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataMetaSocialFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly socialNetwork: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataMetaSocialSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly socialNetwork: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly keywords: InputMaybe<SortOrderEnum>;
  readonly metaDescription: InputMaybe<SortOrderEnum>;
  readonly metaRobots: InputMaybe<SortOrderEnum>;
  readonly metaSocial: InputMaybe<SiteSiteMetadataMetaSocialSortInput>;
  readonly metaTitle: InputMaybe<SortOrderEnum>;
  readonly metaViewport: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StaticImage = Node & {
  readonly absolutePath: Maybe<Scalars['String']>;
  readonly accessTime: Maybe<Scalars['Date']>;
  readonly atime: Maybe<Scalars['Date']>;
  readonly atimeMs: Maybe<Scalars['Float']>;
  readonly base: Maybe<Scalars['String']>;
  readonly birthTime: Maybe<Scalars['Date']>;
  readonly birthtime: Maybe<Scalars['Date']>;
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Maybe<Scalars['Date']>;
  readonly ctimeMs: Maybe<Scalars['Float']>;
  readonly dev: Maybe<Scalars['Int']>;
  readonly dir: Maybe<Scalars['String']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Maybe<Scalars['Int']>;
  readonly internal: Internal;
  readonly mode: Maybe<Scalars['Int']>;
  readonly modifiedTime: Maybe<Scalars['Date']>;
  readonly mtime: Maybe<Scalars['Date']>;
  readonly mtimeMs: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly nlink: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly prettySize: Maybe<Scalars['String']>;
  readonly rdev: Maybe<Scalars['Int']>;
  readonly relativeDirectory: Maybe<Scalars['String']>;
  readonly relativePath: Maybe<Scalars['String']>;
  readonly root: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Int']>;
  readonly sourceInstanceName: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['Int']>;
};


type StaticImage_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StaticImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageConnection_distinctArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_groupArgs = {
  field: StaticImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageConnection_maxArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_minArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_sumArgs = {
  field: StaticImageFieldSelector;
};

type StaticImageEdge = {
  readonly next: Maybe<StaticImage>;
  readonly node: StaticImage;
  readonly previous: Maybe<StaticImage>;
};

type StaticImageFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type StaticImageFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type StaticImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageGroupConnection_distinctArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_groupArgs = {
  field: StaticImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageGroupConnection_maxArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_minArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_sumArgs = {
  field: StaticImageFieldSelector;
};

type StaticImageSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AccordionFragment = { readonly theme: string | null, readonly title: string | null, readonly layout: string | null, readonly accordionItems: ReadonlyArray<{ readonly header: string | null, readonly content: string | null } | null> | null };

type BannerLinkFragment = { readonly theme: string | null, readonly body: string | null, readonly title: string | null, readonly decoration: { readonly src: string | null, readonly alt: string | null } | null, readonly ctaButtons: ReadonlyArray<{ readonly text: string | null, readonly variant: string | null, readonly href: string | null, readonly target: string | null } | null> | null };

type BlocksUnionFragment = { readonly type: string | null, readonly slug: string | null, readonly theme: string | null, readonly title: string | null, readonly layout: string | null, readonly body: string | null, readonly eyelet: string | null, readonly width: string | null, readonly reversed: string | null, readonly subtitle: string | null, readonly privacy: string | null, readonly size: string | null, readonly rowMaxSteps: number | null, readonly stepsAlign: string | null, readonly src: string | null, readonly full: string | null, readonly autoplay: string | null, readonly loop: string | null, readonly useYoutubeLayout: string | null, readonly content: string | null, readonly accordionItems: ReadonlyArray<{ readonly header: string | null, readonly content: string | null } | null> | null, readonly decoration: { readonly src: string | null, readonly alt: string | null } | null, readonly ctaButtons: ReadonlyArray<{ readonly text: string | null, readonly variant: string | null, readonly href: string | null, readonly target: string | null } | null> | null, readonly image: { readonly alt: string | null, readonly src: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null } | null> | null, readonly background: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly steps: ReadonlyArray<{ readonly title: string | null, readonly description: string | null } | null> | null };

type ComponentsFragment = { readonly components: ReadonlyArray<{ readonly type: string | null, readonly slug: string | null, readonly theme: string | null, readonly title: string | null, readonly layout: string | null, readonly body: string | null, readonly eyelet: string | null, readonly width: string | null, readonly reversed: string | null, readonly subtitle: string | null, readonly privacy: string | null, readonly size: string | null, readonly rowMaxSteps: number | null, readonly stepsAlign: string | null, readonly src: string | null, readonly full: string | null, readonly autoplay: string | null, readonly loop: string | null, readonly useYoutubeLayout: string | null, readonly content: string | null, readonly accordionItems: ReadonlyArray<{ readonly header: string | null, readonly content: string | null } | null> | null, readonly decoration: { readonly src: string | null, readonly alt: string | null } | null, readonly ctaButtons: ReadonlyArray<{ readonly text: string | null, readonly variant: string | null, readonly href: string | null, readonly target: string | null } | null> | null, readonly image: { readonly alt: string | null, readonly src: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null } | null> | null, readonly background: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly steps: ReadonlyArray<{ readonly title: string | null, readonly description: string | null } | null> | null } | null> | null };

type EditorialFragment = { readonly eyelet: string | null, readonly title: string | null, readonly body: string | null, readonly width: string | null, readonly reversed: string | null, readonly image: { readonly alt: string | null, readonly src: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly ctaButtons: ReadonlyArray<{ readonly text: string | null, readonly href: string | null, readonly target: string | null, readonly variant: string | null } | null> | null };

type FeatureFragment = { readonly theme: string | null, readonly title: string | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null } | null> | null };

type FormFragment = { readonly title: string | null, readonly subtitle: string | null, readonly privacy: string | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HeroFragment = { readonly theme: string | null, readonly title: string | null, readonly subtitle: string | null, readonly size: string | null, readonly background: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null };

type HowToFragment = { readonly theme: string | null, readonly title: string | null, readonly rowMaxSteps: number | null, readonly stepsAlign: string | null, readonly steps: ReadonlyArray<{ readonly title: string | null, readonly description: string | null } | null> | null };

type LayoutQueryVariables = Exact<{ [key: string]: never; }>;


type LayoutQuery = { readonly layoutYaml: { readonly footer: { readonly currentLangCode: string | null, readonly legalInfo: string | null, readonly productsJsonUrl: string | null, readonly companyLink: { readonly ariaLabel: string | null, readonly href: string | null } | null, readonly languages: { readonly it: { readonly it: string | null } | null } | null, readonly links: { readonly aboutUs: { readonly title: string | null, readonly links: ReadonlyArray<{ readonly ariaLabel: string | null, readonly href: string | null, readonly label: string | null, readonly linkType: string | null } | null> | null } | null, readonly followUs: { readonly title: string | null, readonly links: ReadonlyArray<{ readonly ariaLabel: string | null, readonly href: string | null, readonly label: string | null, readonly linkType: string | null } | null> | null, readonly socialLinks: ReadonlyArray<{ readonly ariaLabel: string | null, readonly icon: string | null, readonly href: string | null, readonly title: string | null } | null> | null } | null, readonly resources: { readonly title: string | null, readonly links: ReadonlyArray<{ readonly ariaLabel: string | null, readonly href: string | null, readonly label: string | null, readonly linkType: string | null } | null> | null } | null } | null } | null, readonly header: { readonly slug: string | null, readonly theme: string | null, readonly ctaButtons: ReadonlyArray<{ readonly color: string | null, readonly size: string | null, readonly href: string | null, readonly target: string | null, readonly text: string | null, readonly variant: string | null } | null> | null, readonly menu: ReadonlyArray<{ readonly label: string | null, readonly href: string | null, readonly theme: string | null, readonly target: string | null } | null> | null, readonly product: { readonly name: string | null, readonly href: string | null } | null } | null, readonly preHeader: { readonly leftCtas: { readonly theme: string | null, readonly ctaButtons: ReadonlyArray<{ readonly color: string | null, readonly href: string | null, readonly target: string | null, readonly text: string | null, readonly variant: string | null } | null> | null } | null, readonly rightCtas: { readonly theme: string | null, readonly ctaButtons: ReadonlyArray<{ readonly color: string | null, readonly href: string | null, readonly startIcon: string | null, readonly target: string | null, readonly text: string | null, readonly variant: string | null } | null> | null } | null } | null } | null };

type MetadataQueryVariables = Exact<{ [key: string]: never; }>;


type MetadataQuery = { readonly site: { readonly siteMetadata: { readonly description: string | null, readonly metaDescription: string | null, readonly metaTitle: string | null, readonly title: string | null, readonly metaSocial: { readonly description: string | null, readonly image: string | null, readonly socialNetwork: string | null, readonly title: string | null } | null } | null } | null };

type PageYamlQueryVariables = Exact<{
  id: InputMaybe<Scalars['String']>;
}>;


type PageYamlQuery = { readonly pageYaml: { readonly seo: { readonly metaDescription: string | null, readonly metaTitle: string | null, readonly metaImage: { readonly localFile: { readonly publicURL: string | null } | null } | null, readonly metaSocial: ReadonlyArray<{ readonly description: string | null, readonly socialNetwork: string | null, readonly title: string | null } | null> | null } | null, readonly components: ReadonlyArray<{ readonly type: string | null, readonly slug: string | null, readonly theme: string | null, readonly title: string | null, readonly layout: string | null, readonly body: string | null, readonly eyelet: string | null, readonly width: string | null, readonly reversed: string | null, readonly subtitle: string | null, readonly privacy: string | null, readonly size: string | null, readonly rowMaxSteps: number | null, readonly stepsAlign: string | null, readonly src: string | null, readonly full: string | null, readonly autoplay: string | null, readonly loop: string | null, readonly useYoutubeLayout: string | null, readonly content: string | null, readonly accordionItems: ReadonlyArray<{ readonly header: string | null, readonly content: string | null } | null> | null, readonly decoration: { readonly src: string | null, readonly alt: string | null } | null, readonly ctaButtons: ReadonlyArray<{ readonly text: string | null, readonly variant: string | null, readonly href: string | null, readonly target: string | null } | null> | null, readonly image: { readonly alt: string | null, readonly src: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null } | null> | null, readonly background: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly steps: ReadonlyArray<{ readonly title: string | null, readonly description: string | null } | null> | null } | null> | null } | null };

type PhotoVideoFragment = { readonly src: string | null, readonly theme: string | null, readonly title: string | null, readonly subtitle: string | null, readonly full: string | null, readonly autoplay: string | null, readonly loop: string | null, readonly useYoutubeLayout: string | null };

type PrivacyFragment = { readonly content: string | null };


}
